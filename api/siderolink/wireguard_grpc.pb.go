// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: siderolink/wireguard.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WireGuardOverGRPCService_CreateStream_FullMethodName = "/sidero.link.WireGuardOverGRPCService/CreateStream"
)

// WireGuardOverGRPCServiceClient is the client API for WireGuardOverGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireGuardOverGRPCServiceClient interface {
	// CreateStream creates a new stream for sending and receiving WireGuard packets.
	// It should contain 'x-siderolink-ipv6-addr' metadata with the virtual IPv6 address of the peer, which
	// was provided by the server when the peer was added.
	CreateStream(ctx context.Context, opts ...grpc.CallOption) (WireGuardOverGRPCService_CreateStreamClient, error)
}

type wireGuardOverGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWireGuardOverGRPCServiceClient(cc grpc.ClientConnInterface) WireGuardOverGRPCServiceClient {
	return &wireGuardOverGRPCServiceClient{cc}
}

func (c *wireGuardOverGRPCServiceClient) CreateStream(ctx context.Context, opts ...grpc.CallOption) (WireGuardOverGRPCService_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WireGuardOverGRPCService_ServiceDesc.Streams[0], WireGuardOverGRPCService_CreateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wireGuardOverGRPCServiceCreateStreamClient{stream}
	return x, nil
}

type WireGuardOverGRPCService_CreateStreamClient interface {
	Send(*PeerPacket) error
	Recv() (*PeerPacket, error)
	grpc.ClientStream
}

type wireGuardOverGRPCServiceCreateStreamClient struct {
	grpc.ClientStream
}

func (x *wireGuardOverGRPCServiceCreateStreamClient) Send(m *PeerPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wireGuardOverGRPCServiceCreateStreamClient) Recv() (*PeerPacket, error) {
	m := new(PeerPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WireGuardOverGRPCServiceServer is the server API for WireGuardOverGRPCService service.
// All implementations must embed UnimplementedWireGuardOverGRPCServiceServer
// for forward compatibility
type WireGuardOverGRPCServiceServer interface {
	// CreateStream creates a new stream for sending and receiving WireGuard packets.
	// It should contain 'x-siderolink-ipv6-addr' metadata with the virtual IPv6 address of the peer, which
	// was provided by the server when the peer was added.
	CreateStream(WireGuardOverGRPCService_CreateStreamServer) error
	mustEmbedUnimplementedWireGuardOverGRPCServiceServer()
}

// UnimplementedWireGuardOverGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWireGuardOverGRPCServiceServer struct {
}

func (UnimplementedWireGuardOverGRPCServiceServer) CreateStream(WireGuardOverGRPCService_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedWireGuardOverGRPCServiceServer) mustEmbedUnimplementedWireGuardOverGRPCServiceServer() {
}

// UnsafeWireGuardOverGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireGuardOverGRPCServiceServer will
// result in compilation errors.
type UnsafeWireGuardOverGRPCServiceServer interface {
	mustEmbedUnimplementedWireGuardOverGRPCServiceServer()
}

func RegisterWireGuardOverGRPCServiceServer(s grpc.ServiceRegistrar, srv WireGuardOverGRPCServiceServer) {
	s.RegisterService(&WireGuardOverGRPCService_ServiceDesc, srv)
}

func _WireGuardOverGRPCService_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WireGuardOverGRPCServiceServer).CreateStream(&wireGuardOverGRPCServiceCreateStreamServer{stream})
}

type WireGuardOverGRPCService_CreateStreamServer interface {
	Send(*PeerPacket) error
	Recv() (*PeerPacket, error)
	grpc.ServerStream
}

type wireGuardOverGRPCServiceCreateStreamServer struct {
	grpc.ServerStream
}

func (x *wireGuardOverGRPCServiceCreateStreamServer) Send(m *PeerPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wireGuardOverGRPCServiceCreateStreamServer) Recv() (*PeerPacket, error) {
	m := new(PeerPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WireGuardOverGRPCService_ServiceDesc is the grpc.ServiceDesc for WireGuardOverGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WireGuardOverGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sidero.link.WireGuardOverGRPCService",
	HandlerType: (*WireGuardOverGRPCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStream",
			Handler:       _WireGuardOverGRPCService_CreateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "siderolink/wireguard.proto",
}
